  type Query {
    hello: String!
    getPerson(name: String, age: Int): String
    getInt(age: Int): Int
    getFloat(price: Float): Float
    getString: String
    getBoolean: Boolean
    getID: ID
    getNumbers(numbers: [Int!]!): [Int]
    # products
    product(id: ID!): Product
    allProducts: [Product!]!
    category(id: ID!): Category
  }

  type Mutation {
   login(email: EmailAddress!, password: String!): AuthResponse
   addProduct(dto: CreateProductDto!): Product
   updateProduct(id: ID!, dto: UpdateProductDto!): Product
   deleteProduct(id: ID!): ID
   addCategory(dto: CreateCategoryDto!): Category
  }

  # El : significa que retirnara un product

  type Product {
    id: ID!,
    name: String!,
    price: Float!,
    description: String!,
    image: String!,
    createdAt: String!,
    categoryId: ID!,
    category: Category!
  }

  type Category {
    id: ID!,
    name: String!,
    image: String!,
    products: [Product!]!
  }

input CreateProductDto {
    name: String!,
    price: Float!,
    description: String!,
    image: String!,
    categoryId: ID!
}

input UpdateProductDto {
    name: String,
    price: Float,
    description: String,
    image: String,
    categoryId: ID
}

type AuthResponse{
  access_token: String!,
  user: User!
}

type User{
  id: ID!,
  email: String!,
  role: String!,
  createdAt: String!
}

input CreateCategoryDto {
  name: CategoryNameType!,
  image: URL!
}

scalar CategoryNameType

# El agregar el signo de exclamaci√≥n al final de cada tipo de dato significa que no pueede ser nulo
#Get = Query
#Post, Delete and Patch = Mutation

#Lists
# [String] = List of strings
# [Int] = List of integers
